# The code place
# ******IMPORTANT********
# Five things to do in program:
# -Apply correct images in correct positions
# -Insert code for user numpad and button inputs
# -Determine and implement a score system for player
# -Bugfixing lol
# -Comments lol
import pygame
from pygame.locals import *
from random import randint
import RPi.GPIO as GPIO
import time
GPIO.setmode(GPIO.BCM)
redButton = 20
greenButton = 21
blueButton = 22

GPIO.setup(redButton, GPIO.IN, GPIO.PUD_DOWN)
GPIO.setup(greenButton, GPIO.IN, GPIO.PUD_DOWN)
GPIO.setup(blueButton, GPIO.IN, GPIO.PUD_DOWN)

black = (0,0,0)
white = (255, 255, 255)


pygame.init()
Easy_ULimit = 5
Easy_LLimit = 1
Medium_ULimit = 10
Medium_LLimit = 5
Hard_ULimit = 15
Hard_LLimit = 10
class App:
    def __init__(self):
        pygame.init()
        self._running = True
        self._player = Player()
        self._scene = 0
        self._forward = False
        self._back = False
        self._size = self.weight, self.height = 800, 600
        self._font = pygame.font.Font('times-new-roman.ttf', 32)
        self._display_surf = pygame.display.set_mode(self._size, pygame.HWSURFACE | pygame.DOUBLEBUF)
        pygame.display.set_caption("Arithma")
        logo = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
        pygame.display.set_icon(logo)
        pygame.init()
    def on_init(self):
        self._running = True
 
    def on_event(self, event):
        if event.type == pygame.QUIT:
            self._running = False
        if event.type == pygame.KEYDOWN:
          if event.key == pygame.K_RETURN:
            self._forward = True
       
    def on_loop(self):
        if(self._forward == True and not (self._scene % 2 == 0) or self._scene == 10):
          self._forward = False
          self._scene += 1
        if(self._forward == True and self._scene == 2):
          self._forward = False
          self._scene += 1
          e1 = Character()
          self.on_combat(e1)
        if(self._forward == True and self._scene == 4):
          self._forward = False
          self._scene += 1
          e2 = Character()
          self.on_combat(e2)
        if(self._forward == True and self._scene == 6):
          self._forward = False
          self._scene += 1
          e3 = Character()
          self.on_combat(e3)
        if(self._forward == True and self._scene == 8):
          self._forward = False
          self._scene += 1
          e4 = Character()
          self.on_combat(e4)
        if(self._forward == True and self._scene == 11):
          self._forward = False
          self._running = False

    def on_render(self):
        if(self._scene == 0):
          self._display_surf.fill(black)
          title_image = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(title_image, (200, 200))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (300, 300))
          pygame.display.update
        if(self._scene == 1):
          self._display_surf.fill(black)
          gameplay_explanation = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(gameplay_explanation, (0, 0))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (700, 500))
          pygame.display.update
        if(self._scene == 2):
          self._display_surf.fill(black)
          dialogue_one = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(dialogue_one, (0, 0))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (700, 500))
          pygame.display.update
        if(self._scene == 4):
          self._display_surf.fill(black)
          dialogue_two = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(dialogue_two, (0, 0))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (700, 500))
          pygame.display.update
        if(self._scene == 6):
          self._display_surf.fill(black)
          dialogue_three = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(dialogue_three, (0, 0))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (700, 500))
          pygame.display.update
        if(self._scene == 8):
          self._display_surf.fill(black)
          dialogue_four = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(dialogue_four, (0, 0))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (700, 500))
          pygame.display.update
        if(self._scene == 10):
          self._display_surf.fill(black)
          final_dialogue = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(final_dialogue, (0, 0))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (700, 500))
          pygame.display.update
        if(self._scene == 11):
          self._display_surf.fill(black)
          title_image = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(title_image, (0, 0))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (700, 500))
          text = self._font.render("Score = {}\nHealth = {} / {}".format(self._player.score, self._player.health, self._player.health_max), True, white)
          textRect = text.get_rect()
          textRect.center = (X // 2, Y // 2) 
          self._display_surf.blit(text, textRect) 
          pygame.display.update
    def on_cleanup(self):
      pygame.quit()
    def attack_screen(self):
      self._display_surf.fill(black)
      player_icon = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
      self._display_surf.blit(player_icon, (0, 0))
      enemy_icon = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
      self._display_surf.blit(enemy_icon, (0, 0))
      text = self._font.render("Health = {} / {}".format(self._player.health, self._player.health_max), True, white)
      textRect = text.get_rect()
      textRect.center = (X // 2, Y // 2) 
      self._display_surf.blit(text, textRect) 
      text = self._font.render("Health = {} / {}".format(e.health, e.health_max), True, white)
      textRect = text.get_rect()
      textRect.center = (X // 2, Y // 2) 
      self._display_surf.blit(text, textRect) 
      text = self._font.render("{}".format(self._player.name), True, white)
      textRect = text.get_rect()
      textRect.center = (X // 2, Y // 2) 
      self._display_surf.blit(text, textRect) 
      text = self._font.render("{}".format(e.name), True, white)
      textRect = text.get_rect()
      textRect.center = (X // 2, Y // 2) 
      self._display_surf.blit(text, textRect)
    def on_combat(self, e):
      combat_scene = 0
      defense_round = False
      chosen_attack = 0
      while(self._player.health > 0 and e.health > 0):
        attack_confirmed = False
        if(combat_scene == 0):
          self.attack_screen()
          attack_options = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(attack_options, (700, 500))
          pygame.display.update
        input_state = GPIO.input(20)
        if(combat_scene == 0 and input_state == False):
          combat_scene += 1
          self.attack_screen()
          attack_one = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(attack_one, (700, 500))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (700, 500))
          pygame.display.update
          while(not attack_confirmed):
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_RETURN:
                attack_confirmed = True
                combat_scene += 1
                chosen_attack = 1
        input_state = GPIO.input(21)
        if(combat_scene == 0 and imput_state == False):
          combat_scene += 1
          self.attack_screen()
          attack_two = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(attack_two, (700, 500))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (700, 500))
          pygame.display.update
          while(not attack_confirmed):
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_RETURN:
                  attack_confirmed = True
                  combat_scene += 1
                  chosen_attack = 2
        input_state = GPIO.input(22)
        if(combat_scene == 0 and input_state == False):
          combat_scene += 1
          self.attack_screen()
          attack_three = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(attack_three, (700, 500))
          return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
          self._display_surf.blit(return_button, (700, 500))
          pygame.display.update
          while(not attack_confirmed):
            if (event.type == pygame.KEYDOWN):
              attack_confirmed = True
              combat_scene += 1
              chosen_attack = 3
            if(event.type == pygame.RedButton):
              attack_confirmed = True
              combat_scene -= 1
        if(combat_scene == 2):
          clock = pygame.time.Clock()
          timer = 10000
          player_answer = " "
          problem = ''
          answer = " "
        if(chosen_attack == 1):
            x = randint(Easy_LLimit, Easy_ULLimit)
            y = randint(Easy_LLimit, Easy_ULLimit)
            problem = "{} * {} = ?".format(x,y)
            answer = str(x * y)
        if(chosen_attack == 2):
            x = randint(Medium_LLimit, Medium_ULLimit)
            y = randint(Medium_LLimit, Medium_ULLimit)
            problem = "{} * {} = ?".format(x,y)
            answer = str(x * y)
        if(chosen_attack == 3):
            x = randint(Hard_LLimit, Hard_ULLimit)
            y = randint(Hard_LLimit, Hard_ULLimit)
            problem = "{} * {} = ?".format(x,y)
            answer = str(x * y)
        while(not (event.type == pygame.KEYDOWN) and timer > 0):
            self.attack_screen()
            text = self._font.render("{}".format(problem_txt), True, white)
            textRect = text.get_rect()
            textRect.center = (X // 2, Y // 2) 
            self._display_surf.blit(text, textRect) 
            text = self._font.render("{}".format(str(int(timer / 1000))), True, white)
            textRect = text.get_rect()
            textRect.center = (X // 2, Y // 2) 
            self._display_surf.blit(text, textRect) 
            text = self._font.render("{}".format(str(player_answer)), True, white)
            textRect = text.get_rect()
            textRect.center = (X // 2, Y // 2) 
            self._display_surf.blit(text, textRect) 
            if(defense_round):
              text = self._font.render("Defend!", True, white)
              textRect = text.get_rect()
              textRect.center = (X // 2, Y // 2) 
              self._display_surf.blit(text, textRect) 
            else:
              text = self._font.render("Attack!", True, white)
              textRect = text.get_rect()
              textRect.center = (X // 2, Y // 2) 
              self._display_surf.blit(text, textRect) 
            pygame.display.update
            timer -= 1
            
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_0:
                  player_answer += "0"
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_1:
                  player_answer += "1"
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_2:
                  player_answer += "2"
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_3:
                  player_answer += "3"
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_4:
                  player_answer += "4"
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_5:
                  player_answer += "5"
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_6:
                  player_answer += "6"
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_7:
                  player_answer += "7"
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_8:
                  player_answer += "8"
            if (event.type == pygame.KEYDOWN):
              if event.key == pygame.K_9:
                  player_answer += "9"

            clock.tick(100)
        if(player_answer == answer and not defense_round):
              self._player.do_damage(e, chosen_attack)
              while(not (event.type == pygame.KEYDOWN)):
                  self.attack_screen()
                  return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
                  self._display_surf.blit(return_button, (700, 500))
                  text = self._font.render("You have dealt {} damage!".format(str(chosen_attack * 5)), True, white)
                  textRect = text.get_rect()
                  textRect.center = (X // 2, Y // 2) 
                  self._display_surf.blit(text, textRect) 
                  pygame.display.update
                  defense_round = True

        elif(player_answer == answer):
            while(not (event.type == pygame.KEYDOWN)):
              self.attack_screen()
              return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
              self._display_surf.blit(return_button, (700, 500))
              text = self._font.render("You have defended against the attack!", True, white)
              textRect = text.get_rect()
              textRect.center = (X // 2, Y // 2) 
              self._display_surf.blit(text, textRect) 
              pygame.display.update
            defense_round = False
            combat_scene = 0
            chosen_attack = 0
        elif(defense_round):
            e.do_damage(self._player, chosen_attack)
            while True:
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_RETURN:
                        break
                        pass
                self.attack_screen()
                return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
                self._display_surf.blit(return_button, (700, 500))
                text = self._font.render("You have taken {} damage!".format(str(chosen_attack * 5)), True, white)
                textRect = text.get_rect()
                textRect.center = (X // 2, Y // 2) 
                self._display_surf.blit(text, textRect) 
                pygame.display.update
            defense_round = False
            combat_scene = 0
            chosen_attack = 0
        else:
            while(not (event.type == pygame.KEYDOWN)):
              self.attack_screen()
              return_button = pygame.image.load("Arithma Title Final Blue Fitted.png").convert()
              self._display_surf.blit(return_button, (700, 500))
              text = self._font.render("{} defended against the attack!".format(e.name), True, white)
              textRect = text.get_rect()
              textRect.center = (X // 2, Y // 2) 
              self._display_surf.blit(text, textRect) 
              pygame.display.update
            defense_round = True         
      if(self._player.health <= 0):
        self._scene = 11
      if(e.health <= 0):
        self._scene += 1
    def on_execute(self):
        if self.on_init() == False:
            self._running = False
        while( self._running ):
            for event in pygame.event.get():
                self.on_event(event)
            self.on_loop()
            self.on_render()
        self.on_cleanup()

class Character:
  def __init__(self):
    self.name = ""
    self.health = 60
    self.health_max = 60
  def do_damage(self, target, damage):
    target.health -= damage * 5

class Player(Character):
  def __init__(self):
    Character.__init__(self)
    self.health = 100
    self.health_max = 100
    self.score = 0

if __name__ == "__main__" :
    theApp = App()
    theApp.on_execute()
